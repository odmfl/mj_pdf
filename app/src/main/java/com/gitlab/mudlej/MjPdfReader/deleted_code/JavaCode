private void showExitFullScreen(int page, float positionOffset) {
    if (!isFullscreenToggled) return;

    // scroll down
    if (positionOffset > pdfOldPositionOffset
            && viewBinding.exitFullScreenButton.getVisibility() == View.VISIBLE) {
        if (positionOffset == 0) return;

        int showPeriod = 1 * 1000;
        /* This has a problem where when the scroll inverted the postDelayed keeps with its
         * mission, it should be canceled, .removeCallbackAndMessages could be used*/
        new Handler().postDelayed(()
                -> viewBinding.exitFullScreenButton.setVisibility(View.INVISIBLE), showPeriod);

    }
    else if (positionOffset < pdfOldPositionOffset
            && viewBinding.exitFullScreenButton.getVisibility() == View.INVISIBLE) {
        // if scrolled up, show the exit fullscreen button for two seconds
        viewBinding.exitFullScreenButton.setVisibility(View.VISIBLE);

        // hide it after a period if not at the very top of the file
        if (positionOffset == 0) return;

        int showPeriod = 2 * 1000;
        new Handler().postDelayed(new Runnable() {
            @Override
            public void run() {
                viewBinding.exitFullScreenButton.setVisibility(View.INVISIBLE);
            }
        }, showPeriod);

    }

    pdfOldPositionOffset = positionOffset;
}


private void setupShowInLauncherPreference() {
    Preference showInLauncherPref = findPreference(Preferences.showInLauncherKey);
    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.Q) {
        // Starting from Android Q it is not possible anymore to hide the app from launcher
        // See https://developer.android.com/reference/android/content/pm/LauncherApps#getActivityList(java.lang.String,%20android.os.UserHandle)
        getPreferenceScreen().removePreference(showInLauncherPref);
    } else {
        setOptionsListTopMargin();
        showInLauncherPref.setOnPreferenceChangeListener((preference, newValue) -> {
            try {
                setLauncherAliasState((boolean) newValue);
                return true;
            } catch (Exception ignored) {
                return false;
            }
        });
    }

    private void setOptionsListTopMargin() {
        int marginSize = (int) TypedValue.applyDimension(COMPLEX_UNIT_DIP, 10, getResources().getDisplayMetrics());
        View marginView = new View(this);
        marginView.setMinimumHeight(marginSize);
        getListView().addHeaderView(marginView, null, false);
    }

    private void setLauncherAliasState(boolean enableAlias) {
        getPackageManager().setComponentEnabledSetting(
                new ComponentName(this, "com.gitlab.mudlej.MjPdfReader.LauncherAlias"),
                enableAlias ? COMPONENT_ENABLED_STATE_ENABLED : COMPONENT_ENABLED_STATE_DISABLED,
                DONT_KILL_APP
        );
    }
}


public static void restartApp(Context context) {
    PackageManager packageManager = context.getPackageManager();
    Intent intent = packageManager.getLaunchIntentForPackage(context.getPackageName());
    ComponentName componentName = intent.getComponent();
    Intent mainIntent = Intent.makeRestartActivityTask(componentName);
    context.startActivity(mainIntent);
    Runtime.getRuntime().exit(0);
}
